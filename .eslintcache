[{"F:\\portfolio\\react\\messenger-ts\\src\\index.tsx":"1","F:\\portfolio\\react\\messenger-ts\\src\\firebase.js":"2","F:\\portfolio\\react\\messenger-ts\\src\\App.tsx":"3","F:\\portfolio\\react\\messenger-ts\\src\\store\\index.ts":"4","F:\\portfolio\\react\\messenger-ts\\src\\hooks\\use-auth.js":"5","F:\\portfolio\\react\\messenger-ts\\src\\const.ts":"6","F:\\portfolio\\react\\messenger-ts\\src\\Pages\\ChatPage.tsx":"7","F:\\portfolio\\react\\messenger-ts\\src\\Pages\\HomePage.tsx":"8","F:\\portfolio\\react\\messenger-ts\\src\\Pages\\RegistrationPage.tsx":"9","F:\\portfolio\\react\\messenger-ts\\src\\Pages\\LoginPage.tsx":"10","F:\\portfolio\\react\\messenger-ts\\src\\Pages\\UserPage.tsx":"11","F:\\portfolio\\react\\messenger-ts\\src\\components\\User-List\\UserList.tsx":"12","F:\\portfolio\\react\\messenger-ts\\src\\components\\Header\\Header.tsx":"13","F:\\portfolio\\react\\messenger-ts\\src\\store\\slices\\userSlice.ts":"14","F:\\portfolio\\react\\messenger-ts\\src\\components\\Chat\\Chat.tsx":"15","F:\\portfolio\\react\\messenger-ts\\src\\components\\Login\\Login.tsx":"16","F:\\portfolio\\react\\messenger-ts\\src\\components\\SingUp\\SingUp.tsx":"17","F:\\portfolio\\react\\messenger-ts\\src\\components\\User\\User.tsx":"18","F:\\portfolio\\react\\messenger-ts\\src\\components\\Form\\Form.tsx":"19","F:\\portfolio\\react\\messenger-ts\\src\\components\\Message\\Message.tsx":"20","F:\\portfolio\\react\\messenger-ts\\src\\components\\CreateMessage\\CreateMessage.tsx":"21"},{"size":541,"mtime":1658301066260,"results":"22","hashOfConfig":"23"},{"size":613,"mtime":1658319916693,"results":"24","hashOfConfig":"23"},{"size":1195,"mtime":1658331512386,"results":"25","hashOfConfig":"23"},{"size":184,"mtime":1657628461968,"results":"26","hashOfConfig":"23"},{"size":330,"mtime":1658332005670,"results":"27","hashOfConfig":"23"},{"size":218,"mtime":1658142855758,"results":"28","hashOfConfig":"23"},{"size":1429,"mtime":1658331816327,"results":"29","hashOfConfig":"23"},{"size":424,"mtime":1658300885138,"results":"30","hashOfConfig":"23"},{"size":426,"mtime":1658300895962,"results":"31","hashOfConfig":"23"},{"size":392,"mtime":1658146533237,"results":"32","hashOfConfig":"23"},{"size":813,"mtime":1658319781694,"results":"33","hashOfConfig":"23"},{"size":2975,"mtime":1658331960796,"results":"34","hashOfConfig":"23"},{"size":5031,"mtime":1658332367616,"results":"35","hashOfConfig":"23"},{"size":1174,"mtime":1658330982805,"results":"36","hashOfConfig":"23"},{"size":2686,"mtime":1658331221947,"results":"37","hashOfConfig":"23"},{"size":1898,"mtime":1658319986557,"results":"38","hashOfConfig":"23"},{"size":1724,"mtime":1658320001106,"results":"39","hashOfConfig":"23"},{"size":2149,"mtime":1658320493883,"results":"40","hashOfConfig":"23"},{"size":3312,"mtime":1658320311453,"results":"41","hashOfConfig":"23"},{"size":1693,"mtime":1658323422637,"results":"42","hashOfConfig":"23"},{"size":2013,"mtime":1658329855462,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"mg3ops",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"F:\\portfolio\\react\\messenger-ts\\src\\index.tsx",[],["93","94"],"F:\\portfolio\\react\\messenger-ts\\src\\firebase.js",[],"F:\\portfolio\\react\\messenger-ts\\src\\App.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\store\\index.ts",[],"F:\\portfolio\\react\\messenger-ts\\src\\hooks\\use-auth.js",[],"F:\\portfolio\\react\\messenger-ts\\src\\const.ts",[],"F:\\portfolio\\react\\messenger-ts\\src\\Pages\\ChatPage.tsx",["95","96"],"import { collection, onSnapshot, orderBy, query } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../hooks/use-auth\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppRoute } from \"../const\";\r\nimport Chat from \"../components/Chat/Chat\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setHeaderChat } from \"../store/slices/userSlice\";\r\n\r\n\r\n\r\nfunction useUpdate(ChatId: any) {\r\n  const [newMessages, setNewMessages] = useState<any[]>([]);\r\n  useEffect(() => {\r\n    const q = query(collection(db, `${ChatId}`), orderBy(\"createAt\"));\r\n    /* eslint-disable */\r\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n      /* eslint-enable */\r\n      const messages: any = [];\r\n      querySnapshot.forEach((doc) => {\r\n        messages.push(doc.data());\r\n      });\r\n      setNewMessages(messages);\r\n    })\r\n  }, []);\r\n  return newMessages;\r\n}\r\n\r\n\r\nfunction ChatPage(): JSX.Element {\r\n  const { ChatID, nameFriend } = useAuth();\r\n  const newMessages = useUpdate(ChatID);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(setHeaderChat({\r\n      HeaderChat: nameFriend\r\n    }))\r\n  }, [ChatID])\r\n  return (\r\n    <>\r\n      {\r\n        !ChatID ?\r\n          <Navigate replace to={AppRoute.userList} />\r\n          :\r\n          <Chat messagesList={newMessages} />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChatPage\r\n","F:\\portfolio\\react\\messenger-ts\\src\\Pages\\HomePage.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\Pages\\RegistrationPage.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\Pages\\LoginPage.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\Pages\\UserPage.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\components\\User-List\\UserList.tsx",["97"],"import { Grid, TextField } from \"@mui/material\"\r\nimport { collection, onSnapshot, orderBy, query } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase\";\r\nimport User from \"../User/User\";\r\nimport _ from \"lodash\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useAuth } from '../../hooks/use-auth'\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { AppRoute } from \"../../const\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setHeaderChat } from \"../../store/slices/userSlice\";\r\n\r\n\r\nconst q = query(collection(db, \"Users\"), orderBy(\"secondName\"));\r\nlet users: any = [];\r\n/* eslint-disable */\r\nconst unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n\r\n  /* eslint-enable */\r\n  const newUsers: any = [];\r\n  querySnapshot.forEach((doc) => {\r\n    newUsers.push(doc.data());\r\n  });\r\n  users = [];\r\n  users = [...newUsers]\r\n  if (!_.isEqual(users, newUsers)) {\r\n    users = [];\r\n    users = [...newUsers]\r\n  }\r\n});\r\n\r\n\r\n\r\nfunction UserList() {\r\n  const [navChat, setNavChat] = useState(false);\r\n  const { isAuth, email } = useAuth();\r\n  const [usersList, setUsersList] = useState<any[]>([]);\r\n  const [sortKey, setSortKey] = useState<string>('');\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(setHeaderChat({\r\n      HeaderChat: \"\"\r\n    }))\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (sortKey === \"\") {\r\n      setUsersList(users)\r\n    }\r\n    else {\r\n      let sortUsers: any[] = [];\r\n      users.forEach((user: any) => {\r\n        const fullName = user.firstName + \" \" + user.secondName;\r\n        if (fullName.indexOf(sortKey) > -1) {\r\n          sortUsers.push(user)\r\n        }\r\n        setUsersList(sortUsers)\r\n      })\r\n    }\r\n  }, [sortKey])\r\n  useEffect(() => {\r\n    setUsersList(users)\r\n  }, [users])\r\n  return (\r\n    <>\r\n      {isAuth ?\r\n        (\r\n          navChat ?\r\n            <Navigate replace to={AppRoute.chat} />\r\n            :\r\n            < Grid container\r\n              style={{ width: \"min(100% - 2rem)\", marginInline: \"auto\", height: \"100%\", marginTop: \"70px\" }}\r\n              direction={\"column\"}\r\n              rowGap={\"20px\"}\r\n            >\r\n              <h1\r\n                style={{ margin: \"0, auto\", textAlign: \"center\", marginBottom: \"25px\", marginTop: \"25px\" }}\r\n              >\r\n                All Users\r\n              </h1>\r\n              <TextField\r\n                label=\"UserName\"\r\n                variant=\"outlined\"\r\n                value={sortKey}\r\n                onChange={(e) => setSortKey(e.target.value)} />\r\n              <div\r\n                className=\"users-list\"\r\n              >\r\n                {\r\n                  usersList.map((user) => email !== user.email ? <User key={user.id} firstName={user.firstName} secondName={user.secondName} userId={user.id} setNavChat={setNavChat} /> : null)\r\n                }\r\n              </div>\r\n            </Grid>\r\n        )\r\n        :\r\n        <Navigate replace to={AppRoute.login} />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default UserList\r\n","F:\\portfolio\\react\\messenger-ts\\src\\components\\Header\\Header.tsx",["98"],"import AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Divider from '@mui/material/Divider';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport { memo, useEffect, useState } from 'react';\r\nimport { Avatar } from '@mui/material';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeUser } from \"../../store/slices/userSlice\";\r\nimport { AppRoute } from '../../const';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuth } from '../../hooks/use-auth';\r\nimport { getAuth } from 'firebase/auth';\r\n\r\n\r\ninterface Props {\r\n  window?: () => Window;\r\n\r\n}\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default memo(function Header(props: Props) {\r\n  const { firstName, secondName, ChatID, HeaderChat, nameFriend } = useAuth();\r\n  const { window } = props;\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n  const [nameHead, setNameHead] = useState<string>(`${secondName} ${firstName}`);\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (HeaderChat !== \"\") {\r\n      setNameHead(`Chat with ${nameFriend}`)\r\n    } else {\r\n      setNameHead(`${secondName} ${firstName}`)\r\n    }\r\n  }, [HeaderChat])\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  function exit() {\r\n    getAuth().signOut().then(function () {\r\n      dispatch(removeUser());\r\n    }, function (error) {\r\n      console.error('Sign Out Error', error);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  const drawer = (\r\n    <Box onClick={handleDrawerToggle} sx={{ textAlign: 'center' }}\r\n      style={{ height: \"10vh\" }}\r\n    >\r\n      <Typography variant=\"h6\" sx={{ my: 2 }}>\r\n        <p style={{ textOverflow: \"ellipsis\" }}>\r\n          {nameHead}\r\n        </p>\r\n      </Typography>\r\n      <Divider />\r\n      <List>\r\n        <Link to={AppRoute.userList}>\r\n          <ListItem disablePadding>\r\n            <ListItemButton sx={{ textAlign: 'center' }}>\r\n              <ListItemText primary='Users' />\r\n            </ListItemButton>\r\n          </ListItem>\r\n        </Link>\r\n        <Link to={AppRoute.chat} >\r\n          <ListItem disablePadding\r\n            disabled={!ChatID}>\r\n            <ListItemButton sx={{ textAlign: 'center' }}>\r\n              <ListItemText primary='Chat' />\r\n            </ListItemButton>\r\n          </ListItem>\r\n        </Link>\r\n        <Button\r\n          variant=\"text\"\r\n          style={{ color: \"black\" }}\r\n          onClick={exit}\r\n        >\r\n          Sing Out\r\n        </Button>\r\n      </List>\r\n    </Box >\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <>\r\n      <AppBar component=\"nav\"\r\n        style={{ backgroundColor: \"rgb(101 119 163)\" }}\r\n      >\r\n        <Toolbar\r\n          style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n        >\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2, display: { sm: 'none' } }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{ display: { xs: 'none', sm: 'block' } }}\r\n            style={{ display: \"flex\", alignItems: \"center\", gap: \"10px\" }}\r\n          >\r\n            <Avatar />\r\n            <p style={{ textOverflow: \"ellipsis\" }}>\r\n              {nameHead}\r\n            </p>\r\n          </Typography>\r\n          <Box sx={{ display: { xs: 'none', sm: 'block' } }}>\r\n            <Link to={AppRoute.userList} >\r\n              <Button sx={{ color: '#fff' }}>\r\n                Users\r\n              </Button>\r\n            </Link>\r\n            <Link to={AppRoute.chat} >\r\n              <Button sx={{ color: '#fff' }}\r\n                disabled={!ChatID}\r\n              >\r\n                Chat\r\n              </Button>\r\n            </Link>\r\n          </Box>\r\n          <Button\r\n            variant=\"text\"\r\n            style={{ color: \"white\" }}\r\n            onClick={exit}\r\n          >\r\n            Sing Out\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Box component=\"nav\">\r\n        <Drawer\r\n          container={container}\r\n          variant=\"temporary\"\r\n          open={mobileOpen}\r\n          onClose={handleDrawerToggle}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n          sx={{\r\n            display: { xs: 'block', sm: 'none' },\r\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n          }}\r\n        >\r\n          {drawer}\r\n        </Drawer>\r\n      </Box>\r\n    </>\r\n  )\r\n})","F:\\portfolio\\react\\messenger-ts\\src\\store\\slices\\userSlice.ts",[],"F:\\portfolio\\react\\messenger-ts\\src\\components\\Chat\\Chat.tsx",["99","100"],"\r\nimport { Container, Grid } from \"@mui/material\";\r\nimport _ from \"lodash\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useAuth } from \"../../hooks/use-auth\";\r\nimport CreateMessage from \"../CreateMessage/CreateMessage\";\r\nimport Message from \"../Message/Message\";\r\n/* eslint-disable */\r\nfunction sendNotification(title: string, options: any) {\r\n  if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\r\n    if (!(\"Notification\" in window)) {\r\n      alert('Ваш браузер не поддерживает HTML Notifications, его необходимо обновить.');\r\n    }\r\n    else if (Notification.permission === \"granted\") {\r\n      var notification = new Notification(title, options);\r\n    }\r\n    else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission(function (permission) {\r\n\r\n        if (permission === \"granted\") {\r\n          var notification = new Notification(title, options);\r\n\r\n        } else {\r\n          alert('Вы запретили показывать уведомления');\r\n        }\r\n      });\r\n    } else {\r\n\r\n    }\r\n  }\r\n\r\n}\r\n/* eslint-enable */\r\n\r\ntype ChatProps = {\r\n  messagesList: any[]\r\n}\r\n\r\nfunction Chat(props: ChatProps) {\r\n  const { messagesList } = props;\r\n  const { nameFriend, email } = useAuth();\r\n  const divRef = useRef<null | HTMLDivElement>(null)\r\n  const [newMessagesList, setNewMessagesList] = useState<any[]>([])\r\n  const [check, setCheck] = useState(false)\r\n  useEffect(() => {\r\n    if (!(_.isEqual(messagesList, newMessagesList)) && newMessagesList.length) {\r\n      const { text, name } = messagesList[messagesList.length - 1];\r\n      if (name !== email) {\r\n        sendNotification(`New Message from ${nameFriend} `, {\r\n          body: `${text}`,\r\n          dir: 'auto'\r\n        });\r\n      }\r\n      setCheck(!check)\r\n    }\r\n    setNewMessagesList(messagesList)\r\n  }, [messagesList])\r\n  useEffect(() => {\r\n    divRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }, [messagesList])\r\n  return (\r\n    < div\r\n      className=\"chat\">\r\n\r\n      <div\r\n      >\r\n        <Grid container\r\n          className=\"chat__wrapper\"\r\n        >\r\n          <div\r\n            className=\"chat__window\"\r\n          >\r\n            <div\r\n              className=\"chat__messages\"\r\n            >\r\n              {messagesList.map((value, index) => <Message key={index} value={value} time={!!value.createAt ?\r\n                value.createAt.seconds\r\n                :\r\n                \"Now\"\r\n              } />)}\r\n            </div>\r\n\r\n            <div ref={divRef} />\r\n          </div>\r\n          <CreateMessage />\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat\r\n","F:\\portfolio\\react\\messenger-ts\\src\\components\\Login\\Login.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\components\\SingUp\\SingUp.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\components\\User\\User.tsx",["101"],"import { Avatar, Button } from \"@mui/material\"\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport { useAuth } from '../../hooks/use-auth';\r\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\r\nimport { db } from \"../../firebase\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { SetChatID, setFriendName } from \"../../store/slices/userSlice\";\r\n\r\n\r\ntype UserProps = {\r\n  userId: string,\r\n  firstName: string,\r\n  secondName: string,\r\n  setNavChat: Function\r\n}\r\n\r\n\r\n\r\nfunction User(props: UserProps): JSX.Element {\r\n  const { userId, secondName, firstName, setNavChat } = props;\r\n  const { id } = useAuth();\r\n  const [IdChat, setIdChat] = useState<string | null>(null);\r\n  const dispatch = useDispatch();\r\n  const [NameFriend] = useState(firstName)\r\n\r\n\r\n\r\n  const createChat = async function (myId: string, userId: string): Promise<any> {\r\n    const arrayID = [userId, myId];\r\n    arrayID.sort();\r\n    const id: string = `${arrayID[0]}${arrayID[1]}`;\r\n    const docRef = doc(db, \"Chats\", `${id}`);\r\n    const docSnap = await getDoc(docRef);\r\n    if (docSnap.exists()) {\r\n      setIdChat(id)\r\n    } else {\r\n      const chat = doc(db, `${setIdChat}`, `${id}`);\r\n      await setDoc(chat, {\r\n        IdChat: `${id}`\r\n      }, { merge: true });\r\n      setIdChat(id)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setNavChat(false)\r\n    if (IdChat) {\r\n      dispatch(SetChatID({\r\n        ChatID: IdChat,\r\n      }))\r\n      dispatch(setFriendName({\r\n        nameFriend: NameFriend\r\n      }))\r\n      setNavChat(true)\r\n    }\r\n  }, [IdChat])\r\n\r\n  return (\r\n\r\n    < div className=\"users-list__link\" >\r\n      <div\r\n        style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar\r\n          style={{\r\n            height: 45,\r\n            width: 45,\r\n            marginRight: 10,\r\n          }}\r\n        />\r\n        <p>{secondName} {firstName}</p>\r\n      </div>\r\n      <Button\r\n        variant=\"text\" endIcon={<SendIcon />}\r\n        style={{ color: \"white\" }}\r\n        onClick={() => createChat(id, userId)}\r\n      >\r\n        Chat\r\n      </Button>\r\n    </div >\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default User\r\n","F:\\portfolio\\react\\messenger-ts\\src\\components\\Form\\Form.tsx",[],"F:\\portfolio\\react\\messenger-ts\\src\\components\\Message\\Message.tsx",["102","103","104","105"],"import { Avatar, Grid } from \"@mui/material\"\r\nimport { useAuth } from \"../../hooks/use-auth\";\r\n\r\ntype MessageProps = {\r\n  value: {\r\n    createAt: {\r\n      nanoseconds: number,\r\n      seconds: number\r\n    },\r\n    name: string,\r\n    text: string,\r\n  }\r\n  time: number | string\r\n}\r\n\r\nfunction Message({ value, time }: MessageProps) {\r\n  let timeSend: string = \"now\"\r\n  if (typeof time === \"number\") {\r\n    timeSend = new Date(time * 1000).toLocaleString().slice(12, 17)\r\n  }\r\n  const { name } = value\r\n  const { email, nameFriend, firstName } = useAuth();\r\n  return (\r\n    <div\r\n      style={{\r\n        maxWidth: \"85%\",\r\n        minWidth: \"20%\",\r\n        margin: 10,\r\n        marginLeft: email === name ? 'auto' : \"10px\",\r\n        backgroundColor: email === name ? '#7171ef' : \"#7d7d8e\",\r\n        width: 'fit-content',\r\n        border: \"1px solid grey\",\r\n        borderRadius: \"5px\",\r\n        color: \"white\",\r\n        padding: 5,\r\n        wordWrap: \"break-word\"\r\n      }}\r\n    >\r\n      {/* <Grid container\r\n        alignItems={'center'}\r\n        columnGap={'5px'}\r\n        style={{\r\n          marginBottom: 10,\r\n        }}\r\n      >\r\n        <Avatar\r\n          style={{\r\n            height: 30,\r\n            width: 30\r\n          }}\r\n        />\r\n        <div>{email === name ?\r\n          `${firstName}` :\r\n          `${nameFriend}`}</div>\r\n      </Grid> */}\r\n      <div\r\n        style={{\r\n          marginBottom: \"10px\",\r\n          whiteSpace: \"pre-wrap\"\r\n        }}\r\n      >{value.text}</div>\r\n      <div\r\n        style={{\r\n          textAlign: \"end\",\r\n          fontSize: \"smaller\",\r\n          color: \"#00000091\"\r\n        }}\r\n      >{timeSend}</div>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Message","F:\\portfolio\\react\\messenger-ts\\src\\components\\CreateMessage\\CreateMessage.tsx",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":26,"column":6,"nodeType":"112","endLine":26,"endColumn":8,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":39,"column":6,"nodeType":"112","endLine":39,"endColumn":14,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"116","line":63,"column":6,"nodeType":"112","endLine":63,"endColumn":13,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"118","line":44,"column":6,"nodeType":"112","endLine":44,"endColumn":18,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":19},{"ruleId":"110","severity":1,"message":"124","line":57,"column":6,"nodeType":"112","endLine":57,"endColumn":20,"suggestions":"125"},{"ruleId":"110","severity":1,"message":"126","line":58,"column":6,"nodeType":"112","endLine":58,"endColumn":14,"suggestions":"127"},{"ruleId":"120","severity":1,"message":"128","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":16},{"ruleId":"120","severity":1,"message":"129","line":1,"column":18,"nodeType":"122","messageId":"123","endLine":1,"endColumn":22},{"ruleId":"120","severity":1,"message":"130","line":22,"column":18,"nodeType":"122","messageId":"123","endLine":22,"endColumn":28},{"ruleId":"120","severity":1,"message":"131","line":22,"column":30,"nodeType":"122","messageId":"123","endLine":22,"endColumn":39},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ChatId'. Either include it or remove the dependency array.","ArrayExpression",["134"],"React Hook useEffect has missing dependencies: 'dispatch' and 'nameFriend'. Either include them or remove the dependency array.",["135"],"React Hook useEffect has an unnecessary dependency: 'users'. Either exclude it or remove the dependency array. Outer scope values like 'users' aren't valid dependencies because mutating them doesn't re-render the component.",["136"],"React Hook useEffect has missing dependencies: 'firstName', 'nameFriend', and 'secondName'. Either include them or remove the dependency array.",["137"],"@typescript-eslint/no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'check', 'email', 'nameFriend', and 'newMessagesList'. Either include them or remove the dependency array. You can also do a functional update 'setCheck(c => ...)' if you only need 'check' in the 'setCheck' call.",["138"],"React Hook useEffect has missing dependencies: 'NameFriend', 'dispatch', and 'setNavChat'. Either include them or remove the dependency array.",["139"],"'Avatar' is defined but never used.","'Grid' is defined but never used.","'nameFriend' is assigned a value but never used.","'firstName' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [ChatId]",{"range":"152","text":"153"},"Update the dependencies array to be: [ChatID, dispatch, nameFriend]",{"range":"154","text":"155"},"Update the dependencies array to be: []",{"range":"156","text":"157"},"Update the dependencies array to be: [HeaderChat, firstName, nameFriend, secondName]",{"range":"158","text":"159"},"Update the dependencies array to be: [check, email, messagesList, nameFriend, newMessagesList]",{"range":"160","text":"161"},"Update the dependencies array to be: [IdChat, NameFriend, dispatch, setNavChat]",{"range":"162","text":"163"},[913,915],"[ChatId]",[1202,1210],"[ChatID, dispatch, nameFriend]",[1740,1747],"[]",[1584,1596],"[HeaderChat, firstName, nameFriend, secondName]",[1811,1825],"[check, email, messagesList, nameFriend, newMessagesList]",[1577,1585],"[IdChat, NameFriend, dispatch, setNavChat]"]